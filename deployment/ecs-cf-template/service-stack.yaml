AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a public subnet, and accessible via a public load balancer.
Parameters:
  # Provide name of networking stack that was created in the previous step 
  StackName:
    Type: String
    Default: FargateNetworkingStack
    Description: The name of the networking Fargate stack that was created in last step. Exported Outputs are used from this stack.
  # Provide service name, by default this is provided as blockchain
  ServiceName:
    Type: String
    Default: blockchain
    Description: Name for the blockchain service
  # Provide image url of the blockchain container. Since we have it store in ECR, and this is not public. 
  # Therefore, please docker build this code here https://github.com/backdoorcodr/blockchain-on-kubernetes
  # and publish it on relevant containers repository. 
  ImageUrl:
    Type: String
    Default: 399827803559.dkr.ecr.eu-west-1.amazonaws.com/blockchain:3000
    Description: Blockchain container image url of the blockchain container. Read comment above. 
  # Update exposed container port. 
  ContainerPort:
    Type: Number
    Default: 3000
    Description: Exposed container port.
  # Container resources configuration
  ContainerCpu:
    Type: Number
    Default: 256
    Description: Amount of CPU reserved for container.
  ContainerMemory:
    Type: Number
    Default: 512
    Description:Amount of RAM reserved for container.
  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
                 should be connected to. 
  Priority:
    Type: Number
    Default: 1
    Description: Priority of the routing rule. Relevant when we have multiple services running. 
  DesiredCount:
    Type: Number
    Default: 2
    Description: Fixed number of running tasks
  Role:
    Type: String
    Default: ""
    Description: (Optional) IAM role to access other AWS resources for e.g. S3, DynamoDB etc
Conditions:
  HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]

Resources:
# Task definition for the service
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ECSTaskExecutionRole']]
      TaskRoleArn:
        Fn::If:
          - 'HasCustomRole'
          - !Ref 'Role'
          - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
  # Service manages tasks. This blockchain service will manage blockchain tasks along with gathering logs 
  # and metrics for monitoring.
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ClusterName']]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'FargateContainersSecurityGroup']]
          Subnets:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PublicSubnetOne']]
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PublicSubnetTwo']]
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroup'

  # Create target group which is connected to alb to traffic accross the targets (which is our blockchain 
  # service here)
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Ref 'ServiceName'
      Port: !Ref 'ContainerPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'VPCId']]

  # Create a rule on the load balancer 
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PublicListener']]
      Priority: !Ref 'Priority'
